# 构建 VitePress 站点并将其部署到 GitHub Pages 的示例工作流程
name:  Deploy Vitepress site to Pages

# 在针对 `main` 分支的推送上运行。如果你
# 使用 `master` 分支作为默认分支，请将其更改为 `master`
on:
  # 在针对 `main` 分支的推送上运行。如果你
  # 使用 `master` 分支作为默认分支，请将其更改为 `master`
  push:
    branches:
      - main
  # 允许你从 Actions 选项卡手动运行此工作流程
  #workflow_dispatch:

# 设置 GITHUB_TOKEN 的权限，以允许部署到 GitHub Pages
# permissions:
#   contents: read
#   pages: write
#   id-token: write

# 只允许同时进行一次部署，跳过正在运行和最新队列之间的运行队列
# 但是，不要取消正在进行的运行，因为我们希望允许这些生产部署完成
# concurrency:
#   group: pages
#   cancel-in-progress: false


jobs:
  # 构建工作
  deploy:
    # 执行环境为linux的ubuntu系统
    runs-on: ubuntu-latest
    steps:
      # 从master分支拉取代码
      - name: Checkout
        uses: actions/checkout@v3
        # with:
        #  fetch-depth: 0
      # 安装pnpm
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 22
          cache: npm # 或 pnpm / yarn
      - run: npm install --frozen-lockfile

      - name: Deploy
        # 将构建产物 commit 到一个分支上，用于发布静态站点资源
        # https://github.com/peaceiris/actions-gh-pages
        #不要将peaceiris改为自己的仓库名，我单纯的以为这个需要改成自己的仓库名，部署上去就build失败了，需引用该仓库的配置
        uses: peaceiris/actions-gh-pages@v3
        with:
          # Github 会在 workflow 中自动生成 GIHUBT_TOKEN，用于认证 workflow 的运行
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # 静态资源目录设置
          publish_dir: docs/.vitepress/dist
          # 默认发布到 gh-pages 分支上，可以指定特定的发布分支（不能选拉取代码的分支）
          publish_branch: gh-pages
          full_commit_message: ${{ github.event.head_commit.message }}
